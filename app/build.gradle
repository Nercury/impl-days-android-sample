apply plugin: 'com.android.application'

class CargoPlugin implements Plugin<Project> {
    void apply(Project project) {
        def extension = project.android.externalNativeBuild.extensions.create('cargo', CargoPluginExtension, project)
        def cargoBuild = project.tasks.create('cargoBuild', CargoBuild) {
            manifestPath = extension.manifestPath
            splits = project.android.splits
        }

        project.tasks.whenTaskAdded { t ->
            logger.info "#### TASK ADDED " + t.name

            if (t.name == 'assembleDebug') {
                t.dependsOn cargoBuild
            }
        }
    }
}

class CargoPluginExtension {
    final Property<String> manifestPath

    CargoPluginExtension(Project project) {
        manifestPath = project.objects.property(String)
    }

    void setPath(String value) {
        manifestPath.set(value)
    }
}

class CargoBuild extends DefaultTask {
    final Property<String> manifestPath = project.objects.property(String)
    final Property<com.android.build.gradle.internal.dsl.Splits> splits = project.objects.property(com.android.build.gradle.internal.dsl.Splits)

    final Map<String, String> abiToRustTargetMap = [
            "armeabi": "arm-linux-androideabi",
            "armeabi-v7a": "armv7-linux-androideabi",
            "arm64-v8a": "aarch64-linux-android",
            "x86": "i686-linux-android",
    ]

    final Map<String, String> targetToToolsMap = [
            "arm-linux-androideabi": "arm-linux-androideabi",
            "armv7-linux-androideabi": "arm-linux-androideabi",
            "aarch64-linux-android": "aarch64-linux-android",
            "i686-linux-android": "x86",
    ]

    final String binPath = "prebuilt/darwin-x86_64/bin"

    @TaskAction
    void run() {
        def com.android.build.gradle.internal.dsl.Splits splits = this.splits.get()

        println System.getenv('PATH')

        def abiTargets = splits.abi.getApplicableFilters().toArray().collect {
            [ abi: it.toString(), target: abiToRustTargetMap[it.toString()] ]
        }

        abiTargets.each { s ->
            logger.info "#### TARGET " + s.target
        }

        def manifestPath = manifestPath.get()

        abiTargets.each { item ->
            def projectDir = project.properties.get('projectDir')
            def ndkPath = project.android.getNdkDirectory();
            def fullManifestPath = new File(projectDir, manifestPath)

            println System.getProperty("java.io.tmpdir")
            println ndkPath
            println "building rust lib " + fullManifestPath + " for " + item.target + " target"

            def compileSdkVersion = project.android.getCompileSdkVersion() // android-25
            def toolsVersion = "4.9"

            def sout = new StringBuilder(), serr = new StringBuilder()
            def proc = ('cargo build -vvv --target ' + item.target + ' --manifest-path ' + fullManifestPath)
            .execute(
            [
            "TMP=" + System.getProperty("java.io.tmpdir").replace('\\', "\\\\"),
            "CC_armv7-linux-androideabi=C:\\Users\\Nerijus\\AppData\\Local\\Android\\Sdk\\ndk-bundle\\toolchains\\arm-linux-androideabi-4.9\\prebuilt\\windows-x86_64\\bin\\arm-linux-androideabi-gcc.exe",
            "CFLAGS_armv7-linux-androideabi=" +
                    "-I C:\\Users\\Nerijus\\AppData\\Local\\Android\\Sdk\\ndk-bundle\\sysroot\\usr\\include",
            "ANDROID_HOME=" + project.android.getSdkDirectory(),
            "NDK_HOME=" + project.android.getNdkDirectory()
            ], projectDir)
            proc.consumeProcessOutput(sout, serr)
            proc.waitFor()

            if (proc.exitValue()) {
                logger.error "$serr"
                logger.error "Make sure you have Rust target " + item.target + " installed"
            } else {
                println "$sout"
            }
            assert !proc.exitValue()

            def rustTargetDir = new File(new File(fullManifestPath, "").parent, "target")
            def rustTargetPlatformDir = new File(rustTargetDir, item.target)
            def rustTargetPlatformBuildDir = new File(rustTargetPlatformDir, "debug")
            def outputLib = new File(rustTargetPlatformBuildDir, "libhello_jni.so")

            def srcDir = new File(projectDir, "src")
            def srcMainDir = new File(srcDir, "main")
            def jniLibsDir = new File(srcMainDir, "jniLibs")
            def jniLibsAbiDir = new File(jniLibsDir, item.abi)
            jniLibsAbiDir.mkdirs()

            def outputFile = new File(jniLibsAbiDir, "libhello-jni.so")
            outputFile.delete()

            InputStream is = new FileInputStream(outputLib);
            OutputStream os = new FileOutputStream(outputFile);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = is.read(buffer)) > 0) {
                os.write(buffer, 0, length);
            }
            is.close();
            os.close();
        }
    }
}

apply plugin: CargoPlugin

android {
    compileSdkVersion 25
    defaultConfig {
        applicationId 'com.example.hellojni'
        minSdkVersion 23
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cargo {
            path "src/main/rust/Cargo.toml"
        }
//        cmake {
//            path "src/main/cpp/CMakeLists.txt"
//        }
    }

    splits {
        abi {
            enable true
            reset()

            //include "x86", "armeabi-v7a", "arm64-v8a"
            include "armeabi-v7a"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:25.4.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
//    implementation files('/Users/nercury/.gradle/caches/modules-2/files-2.1/com.android.tools.build/gradle-core/3.1.2/36e59348ddd26cbed10061dd4760e8ee030b88e4/gradle-core-3.1.2-sources.jar')
}
