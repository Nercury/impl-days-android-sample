apply plugin: 'com.android.application'

class CargoPlugin implements Plugin<Project> {
    void apply(Project project) {
        def extension = project.android.externalNativeBuild.extensions.create('cargo', CargoPluginExtension, project)
        def cargoBuild = project.tasks.create('cargoBuild', CargoBuild) {
            manifestPath = extension.manifestPath
            splits = project.android.splits
        }

        project.tasks.whenTaskAdded { t ->
            if (t.name == 'assembleDebug') {
                t.dependsOn cargoBuild
            }
        }
    }
}

class CargoPluginExtension {
    final Property<String> manifestPath

    CargoPluginExtension(Project project) {
        manifestPath = project.objects.property(String)
    }

    void setPath(String value) {
        manifestPath.set(value)
    }
}

class CargoBuild extends DefaultTask {
    final Property<String> manifestPath = project.objects.property(String)
    final Property<com.android.build.gradle.internal.dsl.Splits> splits = project.objects.property(com.android.build.gradle.internal.dsl.Splits)

    @TaskAction
    void run() {
        def com.android.build.gradle.internal.dsl.Splits splits = this.splits.get()

        splits.abi.getApplicableFilters().each { s ->
            logger.info "#### SPLIT " + s
        }

        logger.info "#### BUILD at " + manifestPath.get()
    }
}

apply plugin: CargoPlugin

android {
    compileSdkVersion 25
    defaultConfig {
        applicationId 'com.example.hellojni'
        minSdkVersion 23
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cargo {
            path "src/main/rust/Cargo.toml"
        }
//        cmake {
//            path "src/main/cpp/CMakeLists.txt"
//        }
    }

    splits {
        abi {
            enable true
            reset()

            include "x86", "armeabi-v7a", "arm64-v8a"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:25.4.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation files('/Users/nercury/.gradle/caches/modules-2/files-2.1/com.android.tools.build/gradle-core/3.1.2/36e59348ddd26cbed10061dd4760e8ee030b88e4/gradle-core-3.1.2-sources.jar')
}
